import 'package:flutter/material.dart';
import 'package:sight_reading_app/screens/instruction_screens/play_along_instruction_screen.dart';
import '../components/sheet_music_components/note.dart';
import 'play_along_screen.dart';
import 'menu_screen.dart';
import 'package:sight_reading_app/components/app_bar_with_settings_icon.dart';
import '../play_along_tracks/treble_track_one.dart' as treble_track1;
import '../play_along_tracks/bass_track_one.dart' as bass_track1;

/// A list containing the keys for each of the buttons generated by build().
List<Key> trackButtonKeys = <Key>[];
/// A list containing the names of each of the play along tracks.
List<String> trackNames = <String>[];
///A list containing the user's records for each of the tracks.
List<String> trackRecords = <String>[];
/// A list of all sheet music for each of the tracks
List<Map<int, Note>> trackSheets = <Map<int, Note>>[];

/// A screen containing a menu of the various tracks the user can play along to.
///
/// The tracks are shown as a List of clickable buttons.
/// There is also an AppBar containing the screen title, a back arrow and a setting icon, which when clicked takes you to the settings screen.
class PlayAlongMenuScreen extends StatelessWidget {
  const PlayAlongMenuScreen({Key? key}) : super(key: key);
  ///The key used to identify the screen
  static const String id = 'play_along_menu_screen';

  ///The names of the tracks to user can play along to.
  //May combine with function getRecords() depending on how data is stored and retrieved.
  //TODO: Add ability to get track names from storage
  List<String> getTracks() {
    return <String>['Ode to Joy - Treble Only',
      'A Simple Bass Melody',
      'C', 'D', 'E', 'F'];
  }

  ///The user records for the tracks you can play along to.
  //May combine with function getTracks() depending on how data is stored and retrieved.
  //TODO: Add ability to get track records from storage
  List<String> getRecords() {
    return <String>['N/A', 'N/A', 'N/A', 'N/A', 'N/A', 'N/A'];
  }

  List<Map<int, Note>> getMusicSheets() {
    return <Map<int, Note>>[
      treble_track1.getTrack(),
      bass_track1.getTrack()
    ];
  }

  @override
  Widget build(BuildContext context) {
    trackNames = getTracks();
    trackRecords = getRecords();
    trackSheets = getMusicSheets();

    trackButtonKeys = <Key>[]; //Resets the list of keys
    ///Generates the keys for the track buttons based on track names.
    for (String track in trackNames) {
      trackButtonKeys.add(Key('trackSelected:$track'));
    }

    return Scaffold(
      appBar: const AppBarWithSettingsIcon(Text('Select a track:'), PlayAlongInstructions.id),
      body: SafeArea(
        child: ListView.separated(
          //Uses an itemBuilder to generate a button for each track, using the names, records and keys generated earlier.
            itemBuilder: (BuildContext context, int index) {
              return SizedBox(
                height: 100.0, //Fixes button height
                child: MenuButton(
                  buttonChild: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: <Widget>[
                      Text(trackNames[index], textAlign: TextAlign.left),
                      SizedBox(width: MediaQuery.of(context).size.width / 4), //Adds space between Text
                      Text('Record: ${trackRecords[index]}', textAlign: TextAlign.right),
                    ],
                  ),
                  onPress: () {
                    Map<int, Note> _map = trackSheets[index];

                    /// The bpm of the moving sheet
                    int bpm = 75;

                    Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => PlayAlongScreen(notes: _map, bpm: bpm),
                        ));
                  },
                  key: trackButtonKeys[index],
                ),
              );
            },
            //Adds blank spaces between each button.
            separatorBuilder: (BuildContext context, int index) =>
            const SizedBox(height: 10),
            itemCount: trackSheets.length
        ),
      ),
    );
  }
}