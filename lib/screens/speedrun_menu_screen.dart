import 'package:flutter/material.dart';
import '../components/app_bar_with_settings_icon.dart';
import '../components/pop_ups/speedrun_menu_instructions.dart';
import '../components/pop_up_components/pop_up_controller.dart';
import '../screens/menu_screen.dart';
import '../screens/speedrun_screen.dart';
import 'menu_screen.dart';
import 'speedrun_screen.dart';
import 'package:sight_reading_app/helper.dart';

///A list containing the various speedrun mode options.
List<int> modes = [10, 20, 30, 40, 50, 60];

///A list containing the keys for each of the buttons generated by build()
List<Key> modeButtonKeys = <Key>[];

/// A list containing the user records for each of the modes.
///
/// This variable copies the actual list and is used for testing purposes.
List<String> modeRecordsCopy = <String>[];

///A screen that displays a scrollable list of available speedrun modes with buttons to access each mode.
///
/// An app bar is present at the top of the screen, which contains the screen's title text, a back arrow and a clickable settings icon that takes you to the settings screen.
class _SpeedrunMenuScreenState extends State<SpeedrunMenuScreen>{
  ///A list containing the user records for each of the modes.
  late Future<List<String>> modeRecords;
  @override
  void initState() {
    modeRecords = getRecordsForMode('speedrun');
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    modeButtonKeys = <Key>[]; //Resets key list.
    //Generates the keys for the quiz buttons based on quiz names, with the exception of the random mixed quiz.
    for (int mode in modes) {
      modeButtonKeys.add(Key('modeSelected:$mode'));
    }

    /// A default value for the records if records have not been obtained in time.
    List<String> defaultRecords = [
      'N/A',
      'N/A',
      'N/A',
      'N/A',
      'N/A',
      'N/A'
    ];

    //Waits for the records to be obtained from shared preferences before building the screen.
    return FutureBuilder(
      future: modeRecords,
      builder: (BuildContext context, AsyncSnapshot snapshot) {
        if (snapshot.connectionState != ConnectionState.done) {
          modeRecordsCopy = defaultRecords;
          return _getScreenWidget(defaultRecords); //The widget while loading (nothing shown currently)
        }
        if (!snapshot.hasData) {
          modeRecordsCopy = defaultRecords;
          return _getScreenWidget(defaultRecords); //The widget when an error happens
        }
        final List<String> modeRecords = snapshot.data;
        modeRecordsCopy = modeRecords;
        return _getScreenWidget(modeRecords);
      },
    );
  }

  /// The widget to be displayed to the user.
  Widget _getScreenWidget(recordData) {
    /// A pop-up screen containing the speedrun instructions.
    PopUpController menu = PopUpController(context: context, menuBuilder: SpeedrunMenuInstructions(context: context));
    return Scaffold(
        appBar: AppBarWithSettingsIcon(const Text('Choose a duration:'), menu),
        body: SafeArea(
          //Uses an itemBuilder to generate a button for each mode, using the names, records and keys generated earlier.
          child: ListView.separated(
            padding: const EdgeInsets.all(8),
            itemCount: modes.length,
            itemBuilder: (BuildContext context, int index) {
              return SizedBox(
                height: 100, //Fixes the button height
                child: MenuButton(
                  buttonChild: Row(
                    mainAxisAlignment: MainAxisAlignment.spaceAround,
                    children: <Widget>[
                      Text(modes[index].toString() + ' seconds',
                          textAlign: TextAlign.left),
                      SizedBox(
                          width: MediaQuery.of(context).size.width /
                              4), //Adds space between Text
                      Text('Record: ${recordData[index]}',
                          textAlign: TextAlign.right),
                    ],
                  ),
                  onPress: () {
                    Navigator.push(
                      context,
                      MaterialPageRoute(
                        builder: (context) => SpeedrunScreen(
                          timerDuration: modes[index],
                        ),
                      ),
                    );
                  },
                  key: modeButtonKeys[index],
                ),
              );
            },
            separatorBuilder: (BuildContext context, int index) =>
            const SizedBox(
              height: 10,
            ),
          ),
        ));
  }
}
///The state for the speedrun menu screen.
class SpeedrunMenuScreen extends StatefulWidget {
  ///The id used to identify the screen.
  static const String id = 'speedrun_menu_screen';

  const SpeedrunMenuScreen({Key? key}) : super(key: key);

  @override
  _SpeedrunMenuScreenState createState() => _SpeedrunMenuScreenState();
}