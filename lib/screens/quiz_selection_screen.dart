import 'package:flutter/material.dart';
import 'package:sight_reading_app/screens/practice_quiz_screen.dart';
import 'package:sight_reading_app/screens/random_quiz_screen.dart';
import '../components/app_bar_with_settings_icon.dart';
import '../components/pop_ups/quiz_instructions.dart';
import '../components/pop_up_components/pop_up_controller.dart';
import '../helper.dart';
import 'menu_screen.dart'; //For MenuButton widget

/// A list containing the names of each quiz, apart from the "random mixed quiz" which has no record.
List<String> quizzes = <String>[
  'Quiz 1 (Lesson 1)',
  'Quiz 2 (Lesson 2)',
  'Quiz 3 (Lesson 3)',
  'Quiz 4 (Lesson 4)',
  'Quiz 5 (Lesson 5)',
  'Quiz 6 (Lesson 6)'
  'Quiz 7 (Lesson 7)',
  'Quiz 8 (Lesson 8)',
  'Quiz 9 (Lesson 9)',
  'Quiz 10 (Lesson 10)'
];

/// A list containing the keys for each of the buttons generated by build().
List<Key> quizButtonKeys = <Key>[];

/// A list containing the user's records for each of the quizzes.
List<String> quizRecords = <String>[];

///The key for the button that confirms the selection of a random quiz.
const randomQuizSelectedKey = Key('quizSelected:Random');

/// A screen that displays a scrollable list of available quizzes with buttons to access each quiz.
///
/// An app bar is present at the top of the screen, which contains the screen's title text, a back arrow and a clickable settings icon that takes you to the settings screen.
/// There is also a button at the bottom of the screen for a "random mixed quiz".
class _QuizSelectionScreenState extends State<QuizSelectionScreen> {
  final ScrollController _firstController = ScrollController();

  @override
  void initState() {
    _loadRecords();
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  /// Loads the records for the quizzes.
  void _loadRecords() async {
    //Sets default values to use while the real records load.
    quizRecords = resetRecordListForMode('quiz');
    // Once the real records are loaded, the screen is refreshed with the new values.
    getRecordsForMode('quiz').then((value) {
      setState(() {
        quizRecords = value;
      });
    });
  }

  ///Builds the screen widgets.
  @override
  Widget build(BuildContext context) {
    quizButtonKeys = <Key>[]; //Resets list of keys
    ///Generates the keys for the quiz buttons based on quiz names, with the exception of the random mixed quiz.
    for (String quiz in quizzes) {
      quizButtonKeys.add(Key('quizSelected:$quiz'));
    }
    return _getScreenWidget();
  }

  /// The widget to be displayed on screen.
  Widget _getScreenWidget() {
    /// A pop-up instruction screen for the quizzes.
    PopUpController menu = PopUpController(
        context: context, menuBuilder: QuizInstructions(context: context));

    return Scaffold(
      appBar: AppBarWithSettingsIcon(const Text('Choose a quiz:'), menu),
      body: SafeArea(
        child: Scrollbar(
          controller: _firstController,
          isAlwaysShown: true,
          child: Column(
            children: <Widget>[
              Expanded(
                /// Uses an itemBuilder to generate a button for each quiz, using the names, records and keys generated earlier.
                child: Scrollbar(
                  controller: _firstController,
                  isAlwaysShown: true,
                  child: ListView.separated(
                    controller: _firstController,
                    padding: const EdgeInsets.all(8),
                    itemCount: quizzes.length,
                    itemBuilder: (BuildContext context, int index) {
                      return SizedBox(
                        height: 100.0,
                        child: MenuButton(
                          buttonChild: Row(
                            mainAxisAlignment: MainAxisAlignment.spaceAround,
                            children: <Widget>[
                              Text(quizzes[index], textAlign: TextAlign.left),
                              SizedBox(
                                  width: MediaQuery.of(context).size.width /
                                      4), //Adds space between Text
                              Text('Record: ${quizRecords[index]}',
                                  textAlign: TextAlign.right),
                            ],
                          ),
                          onPress: () {
                            Navigator.push(
                              context,
                              MaterialPageRoute(
                                  builder: (context) =>
                                      PracticeQuizScreen(lessonID: index + 1)),
                            );
                          },
                          key: quizButtonKeys[index],
                        ),
                      );
                    },
                    //Adds blank spaces between each button
                    separatorBuilder: (BuildContext context, int index) =>
                        const SizedBox(
                      height: 10,
                    ),
                  ),
                ),
              ),
              //Adds the random mixed quiz button to the bottom of the screen.
              //As this is not part of the ListView, it is not moved by scrolling.
              Align(
                  alignment: Alignment.bottomCenter,
                  child: SizedBox(
                    height: 80.0,
                    child: MenuButton(
                      buttonChild:
                          const Center(child: Text("Random mixed quiz")),
                      onPress: () {
                        Navigator.pushNamed(context, RandomQuizScreen.id);
                      },
                      key: randomQuizSelectedKey,
                    ),
                  ))
            ],
          ),
        ),
      ),
    );
  }
}

///The state class for the quiz selection screen.
class QuizSelectionScreen extends StatefulWidget {
  ///The id used to identify the screen.
  static const String id = 'quiz_selection_screen';

  const QuizSelectionScreen({Key? key}) : super(key: key);

  @override
  _QuizSelectionScreenState createState() => _QuizSelectionScreenState();
}
