import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:sight_reading_app/screens/practice_quiz_screen.dart';
import 'package:sight_reading_app/screens/random_quiz_screen.dart';
import 'package:sight_reading_app/screens/speedrun_menu_screen.dart';
import '../components/app_bar_with_settings_icon.dart';
import '../components/instruction_pop_up_content/quiz_instructions.dart';
import '../components/pop_up_components/pop_up_controller.dart';
import '../helper.dart';
import 'menu_screen.dart'; //For MenuButton

/// A list containing the names of each quiz, apart from the "random mixed quiz" which has no record.
List<String> quizzes = <String>[
  'Quiz 1: Lesson 1',
  'Quiz 2: Lesson 2',
  'Quiz 3: Lesson 3',
  'Quiz 4: Lesson 4',
  'Quiz 5: Lesson 5',
  'Quiz 6: Lesson 6'
];

/// A list containing the keys for each of the buttons generated by build().
List<Key> quizButtonKeys = <Key>[];

/// A list containing the user's records for each of the quizzes.
///
/// This is a copy that removes the Future wrapper and is used for testing purposes only.
List<String> quizRecordsCopy = <String>[];

///The key for the button that confirms the selection of a random quiz.
const randomQuizSelectedKey = Key('quizSelected:Random');

///The user records for each of the quizzes.
//TODO: Remove and replace with helper class function in relevant places
//TODO: Check speedrun mode for same idea, then adjust lay_along and endless modes.
Future<List<String>> getQuizRecords() async {
  List<String> records = <String>[];
  final prefs = await SharedPreferences.getInstance();
  for (String quiz in replaceSpacesWithUnderscoresFromStrings(quizzes)) {
    records.add((prefs.getInt('${quiz}_record') ?? 'N/A').toString());
  }
  return records;
}

/// A screen that displays a scrollable list of available quizzes with buttons to access each quiz.
///
/// An app bar is present at the top of the screen, which contains the screen's title text, a back arrow and a clickable settings icon that takes you to the settings screen.
/// There is also a button at the bottom of the screen for a "random mixed quiz".
class _QuizSelectionScreenState extends State<QuizSelectionScreen> {
  ///A list containing the user records for each of the quizzes
  late Future<List<String>> quizRecords;

  @override
  void initState() {
    quizRecords = getQuizRecords();
    super.initState();
  }

  @override
  void dispose() {
    super.dispose();
  }

  ///Builds the screen widgets.
  @override
  Widget build(BuildContext context) {

    quizButtonKeys = <Key>[]; //Resets list of keys
    //Generates the keys for the quiz buttons based on quiz names, with the exception of the random mixed quiz.
    for (String quiz in quizzes) {
      quizButtonKeys.add(Key('quizSelected:$quiz'));
    }

    //TODO: Make size of list dependent on how many modes there actually are
    //TODO: Move to a helper file to reduce code duplication across screens
    /// A default list of records to display if there were any issues in obtaining the real records.
    List<String> defaultRecords = [
      'N/A',
      'N/A',
      'N/A',
      'N/A',
      'N/A',
      'N/A',
    ];

    return FutureBuilder(
      future: quizRecords,
      builder: (BuildContext context, AsyncSnapshot snapshot) {
        if (snapshot.connectionState != ConnectionState.done) {
          modeRecordsCopy = defaultRecords;
          return _getScreenWidget(defaultRecords);
        }
        if (!snapshot.hasData) {
          modeRecordsCopy = defaultRecords;
          return _getScreenWidget(defaultRecords);
        }
        final List<String> modeRecords = snapshot.data;
        modeRecordsCopy = modeRecords;
        return _getScreenWidget(modeRecords);
      },
    );
  }

  /// The widget to be displayed on screen.
  Widget _getScreenWidget(recordData) {
    /// A pop-up instruction screen for the quizzes.
    PopUpController menu = PopUpController(
        context: context, menuBuilder: QuizInstructions(context: context));

    return Scaffold(
      appBar: AppBarWithSettingsIcon(const Text('Choose a quiz:'), menu),
      body: SafeArea(
        child: Column(
          children: <Widget>[
            Expanded(
              //Uses an itemBuilder to generate a button for each quiz, using the names, records and keys generated earlier.
              child: ListView.separated(
                padding: const EdgeInsets.all(8),
                itemCount: quizzes.length,
                itemBuilder: (BuildContext context, int index) {
                  return SizedBox(
                    height: 100.0,
                    child: MenuButton(
                      buttonChild: Row(
                        mainAxisAlignment: MainAxisAlignment.spaceAround,
                        children: <Widget>[
                          Text(quizzes[index], textAlign: TextAlign.left),
                          SizedBox(
                              width: MediaQuery.of(context).size.width /
                                  4), //Adds space between Text
                          Text('Record: ${recordData[index]}',
                              textAlign: TextAlign.right),
                        ],
                      ),
                      onPress: () {
                        Navigator.push(
                            context,
                            MaterialPageRoute(
                              builder: (context) => PracticeQuizScreen(lessonID: index + 1)
                            ),
                        );
                      },
                      key: quizButtonKeys[index],
                    ),
                  );
                },
                //Adds blank spaces between each button
                separatorBuilder: (BuildContext context, int index) =>
                const SizedBox(
                  height: 10,
                ),
              ),
            ),
            //Adds the random mixed quiz button to the bottom of the screen.
            //As this is not part of the ListView, it is not moved by scrolling.
            Align(
                alignment: Alignment.bottomCenter,
                child: SizedBox(
                  height: 80.0,
                  child: MenuButton(
                    buttonChild: const Center(child: Text("Random mixed quiz")),
                    onPress: () {
                      Navigator.pushNamed(
                          context,
                          RandomQuizScreen
                              .id);
                    },
                    key: randomQuizSelectedKey,
                  ),
                ))
          ],
        ),
      ),
    );
  }
}

///The state class for the quiz selection screen.
class QuizSelectionScreen extends StatefulWidget {
  ///The id used to identify the screen.
  static const String id = 'quiz_selection_screen';

  const QuizSelectionScreen({Key? key}) : super(key: key);

  @override
  _QuizSelectionScreenState createState() => _QuizSelectionScreenState();
}